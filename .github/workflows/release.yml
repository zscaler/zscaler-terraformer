name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  pull-requests: write

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: master  # Checkout master branch instead of the tag

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version-file: 'go.mod'

      - name: Set release VERSION
        run: echo "VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Update version.go on master branch
        run: |
          VERSION=${GITHUB_REF#refs/*/}
          # Remove 'v' prefix if present
          VERSION=${VERSION#v}
          
          # Update version.go file
          sed -i "s/var version = \".*\"/var version = \"$VERSION\"/" terraformutils/version.go
          
          # Verify the change
          echo "Updated version.go to:"
          grep "var version" terraformutils/version.go
          
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if there are changes to commit
          if git diff --quiet terraformutils/version.go; then
            echo "No changes to commit - version already up to date"
          else
            git add terraformutils/version.go
            git commit -m "chore: update version to $VERSION [skip ci]"
            git push origin master
            echo "Version updated and pushed to master branch"
          fi

      - name: Checkout the release tag
        run: |
          git fetch --tags
          git checkout ${GITHUB_REF#refs/*/}
          
          # Also update version.go in the tag checkout
          VERSION=${GITHUB_REF#refs/*/}
          VERSION=${VERSION#v}
          sed -i "s/var version = \".*\"/var version = \"$VERSION\"/" terraformutils/version.go

      - name: Import GPG key
        id: import_gpg
        uses: paultyng/ghaction-import-gpg@v2.1.0
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          PASSPHRASE: ${{ secrets.PASSPHRASE }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --clean
        env:
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ env.VERSION }}
